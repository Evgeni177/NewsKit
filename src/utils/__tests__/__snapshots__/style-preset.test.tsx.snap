// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getStylePresetFromTheme with default iconButtonMinimalPrimary style preset 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

.emotion-0:hover:not(:disabled) {
  background-color: #e6f4ff;
}

.emotion-0:active:not(:disabled) {
  background-color: #d5ebff;
}

.emotion-0:disabled {
  background-color: transparent;
  color: #c0c0c0;
}

.emotion-0:disabled svg {
  fill: #c0c0c0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with disabled and loading state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-radius: 50%;
  color: #c0c0c0;
}

.emotion-0 svg {
  fill: #c0c0c0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with disabled state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-radius: 50%;
  color: #c0c0c0;
}

.emotion-0 svg {
  fill: #c0c0c0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, and incorrect for md breakpoints 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }

  .emotion-0:disabled {
    color: red;
  }
}

@media screen and (min-width: 480px) {
  .emotion-0 {
    background-color: blue;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, and interactivePrimary030 for md breakpoints 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }

  .emotion-0:disabled {
    color: red;
  }
}

@media screen and (min-width: 480px) and (max-width: 767px) {
  .emotion-0 {
    background-color: blue;
  }
}

@media screen and (min-width: 768px) {
  .emotion-0 {
    background-color: green;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, interactivePrimary030 for md, and interactivePrimary040 for lg breakpoints 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }
}

@media screen and (min-width: 480px) and (max-width: 767px) {
  .emotion-0 {
    background-color: blue;
  }
}

@media screen and (min-width: 768px) and (max-width: 1023px) {
  .emotion-0 {
    background-color: green;
  }
}

@media screen and (min-width: 1024px) {
  .emotion-0 {
    background-color: #FF00FF;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, interactivePrimary030 for md, interactivePrimary040 for lg breakpoints and ignore wrong prop 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }
}

@media screen and (min-width: 480px) and (max-width: 767px) {
  .emotion-0 {
    background-color: blue;
  }
}

@media screen and (min-width: 768px) and (max-width: 1023px) {
  .emotion-0 {
    background-color: green;
  }
}

@media screen and (min-width: 1024px) {
  .emotion-0 {
    background-color: #FF00FF;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with isSvg  1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-radius: 50%;
  color: #0a68c1;
  fill: #00ff00;
}

.emotion-0:hover:not(:disabled) {
  background-color: #e6f4ff;
  fill: #FF0000;
}

.emotion-0:active:not(:disabled) {
  background-color: #d5ebff;
}

.emotion-0:disabled {
  background-color: transparent;
  color: #c0c0c0;
  fill: #c0c0c0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with loading and selected state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #ffff00;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with loading state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #ffff00;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with nestedCssSelector adds the nested element class to all state selectors 1`] = `
<DocumentFragment>
  .emotion-0 .nested-element-class {
  background-color: transparent;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 .nested-element-class svg {
  fill: #0a68c1;
}

.emotion-0:hover:not(:disabled) .nested-element-class {
  background-color: #e6f4ff;
}

.emotion-0:active:not(:disabled) .nested-element-class {
  background-color: #d5ebff;
}

.emotion-0:disabled .nested-element-class {
  background-color: transparent;
  color: #c0c0c0;
}

.emotion-0:disabled .nested-element-class svg {
  fill: #c0c0c0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with no existing style preset key returns empty fragment 1`] = `
<DocumentFragment>
  <div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with no existing style preset state returns empty fragment 1`] = `
<DocumentFragment>
  <div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with override to interactivePrimary040 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF00FF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with selected state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00ff00;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with selected, selected:focus & selected:hover state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00ff00;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
}

.emotion-0:focus:not(:disabled) {
  background-color: #0000FF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with stateOverwrites without base state fallbacks to empty object for base and returns empty fragment 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FFFF00;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with visited, visited:focus & visited:hover state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

.emotion-0:hover:not(:disabled) {
  background-color: #e6f4ff;
}

.emotion-0:active:not(:disabled) {
  background-color: #d5ebff;
}

.emotion-0:disabled {
  background-color: transparent;
  color: #c0c0c0;
}

.emotion-0:disabled svg {
  fill: #c0c0c0;
}

.emotion-0:visited:not(:disabled) {
  background-color: #00ff00;
}

.emotion-0:visited:hover:not(:disabled) {
  background-color: #FF0000;
}

.emotion-0:visited:focus:not(:disabled) {
  background-color: #0000FF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme without background-color styles 1`] = `
<DocumentFragment>
  .emotion-0 {
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

.emotion-0:disabled {
  color: #c0c0c0;
}

.emotion-0:disabled svg {
  fill: #c0c0c0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme without disabled state styles 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-radius: 50%;
  color: #0a68c1;
}

.emotion-0 svg {
  fill: #0a68c1;
}

.emotion-0:hover:not(:disabled) {
  background-color: #e6f4ff;
}

.emotion-0:active:not(:disabled) {
  background-color: #d5ebff;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;
