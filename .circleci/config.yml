version: 2.1

orbs:
  slack: circleci/slack@3.4.1

slack_status: &slack_status
  channel: '#nuk-pp-newskit'
  mentions: 'newskitdevs'
  fail_only: true
  only_for_branches: 'develop,master'

# ========== APPLITOOLS ENVIRONMENT VARIABLES START ==========

applitools_defaults: &applitools_defaults
  command: |
    export APPLITOOLS_BATCH_ID=`echo $CIRCLE_SHA1`
    export APPLITOOLS_API_KEY=${APPLITOOLS_API_KEY}
    export APPLITOOLS_DONT_CLOSE_BATCHES=true
    echo "export APPLITOOLS_BATCH_ID=${APPLITOOLS_BATCH_ID}" >> $BASH_ENV
    echo "export APPLITOOLS_API_KEY=${APPLITOOLS_API_KEY}" >> $BASH_ENV

# ========== APPLITOOLS ENVIRONMENT VARIABLES END ==========

executors:
  # A basic image with just raw Alpine on it that you can run commands on
  base:
    docker:
      - image: $PIPELINE_REGISTRY/base:latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

  flux-deploy:
    docker:
      - image: $PIPELINE_REGISTRY/flux-k8s:latest
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

  kubectl-deploy:
    docker:
      - image: $PIPELINE_REGISTRY/kubectl:0.1.51
        auth:
          username: $DOCKER_USERNAME
          password: $DOCKER_PASSWORD

  terraform:
    docker:
      - image: hashicorp/terraform:0.12.21

  node:
    docker:
      - image: circleci/node:10.16

  cypress:
    docker:
      - image: cypress/browsers:node12.16.2-chrome81-ff75
  java:
    docker:
     - image: circleci/openjdk:8u252-jdk-buster

commands:
  terraform_init:
    description: Run Terraform Init
    parameters:
      package:
        type: string
    steps:
      - run: |
          source $BASH_ENV
          cd terraform/<< parameters.package >>
          terraform init

  terraform_plan:
    description: Run Terraform Plan
    parameters:
      package:
        type: string
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ""
    steps:
      - run: |
          source $BASH_ENV
          cd terraform/<< parameters.package >>
          terraform plan -out=tfplan -input=false << parameters.terraform_arg >>

  terraform_apply:
    description: Run Terraform Apply
    parameters:
      package:
        type: string
    steps:
      - run: |
          source $BASH_ENV
          cd terraform/<< parameters.package >>
          terraform apply -lock=false -input=false tfplan

  terraform_force_apply:
    description: Run Terraform Apply
    parameters:
      package:
        type: string
    steps:
      - run: |
          source $BASH_ENV
          cd terraform/<< parameters.package >>
          terraform apply -auto-approve

jobs:
  install_deps:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-build-{{ checksum "yarn.lock" }}
      - run:
          name: Dependencies Install
          command: make install
      - save_cache:
          key: yarn-build-{{ checksum "yarn.lock" }}
          paths:
            - ~/.npm
            - ~/.cache
      - persist_to_workspace:
          root: ./
          paths:
            - node_modules/*
            - src/version-number.json
      - slack/status:
          <<: *slack_status

  build_components:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: make build_components
      - persist_to_workspace:
          root: ./
          paths:
            - dist/*
      - slack/status:
          <<: *slack_status

  build_storybook:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: make build_storybook
      - persist_to_workspace:
          root: ./
          paths:
            - dist-storybook/*
      - slack/status:
          <<: *slack_status

  build_docs:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: make build_docs
      - persist_to_workspace:
          root: ./
          paths:
            - public/*
      - slack/status:
          <<: *slack_status

  build_test_e2e:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build E2E Tests
          command: make e2e_test_build
      - persist_to_workspace:
          root: ./
          paths:
            - e2e/dist/*
      - slack/status:
          <<: *slack_status

  test_unit:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Unit Testing
          command: make unit_test
      - store_test_results:
          path: unit-test-results
      - slack/status:
          <<: *slack_status

  deploy_terraform:
    parameters:
      package:
        type: string
    working_directory: ~/project
    executor: terraform
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Setup akamai
          command: |
            echo "[default]
            client_secret = ${AKAMAI_SECRET}
            host = ${AKAMAI_HOST}
            access_token = ${AKAMAI_ACCESS_TOKEN}
            client_token = ${AKAMAI_CLIENT_TOKEN}
            [papi]
            client_secret = ${AKAMAI_SECRET}
            host = ${AKAMAI_HOST}
            access_token = ${AKAMAI_ACCESS_TOKEN}
            client_token = ${AKAMAI_CLIENT_TOKEN}" > ~/.edgerc
      - terraform_init:
          package: << parameters.package >>
      - terraform_force_apply:
          package: << parameters.package >>

  test_visual_comps:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install Headless Chrome dependencies
          command: >
            sudo apt-get install -yq \

            gconf-service libasound2 libatk1.0-0 libatk-bridge2.0-0 libc6 libcairo2
            libcups2 libdbus-1-3 \

            libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0
            libglib2.0-0 libgtk-3-0 libnspr4 \

            libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1
            libxcb1 libxcomposite1 libxcursor1 \

            libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1
            libxtst6 ca-certificates \

            fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils wget
      - run:
          name: "Setup Applitools environment variables"
          <<: *applitools_defaults
      - run:
          name: Run Applitools Storybook Component Tests
          command: make comps_visual_test
      - run:
          name: Close the Applitools Batch
          command: curl --request DELETE --dump-header - "https://eyesapi.applitools.com/api/sessions/batches/$APPLITOOLS_BATCH_ID/close/bypointerid/?apiKey=$APPLITOOLS_API_KEY"
      - slack/status:
          <<: *slack_status

  install_cypress:
    working_directory: ~/project
    executor: cypress
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: install cypress
          command: make install_cypress
      - save_cache:
          key: v1-cypress-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache/Cypress
      - slack/status:
          <<: *slack_status

  test_visual_docs:
    working_directory: ~/project
    executor: cypress
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cypress-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: "Setup Applitools environment variables"
          <<: *applitools_defaults
      - run:
          name: Run Applitools Docs Site Visual Tests
          command: make e2e_visual_test_docs
      - run:
          name: Close the Applitools Batch
          command: curl --request DELETE --dump-header - "https://eyesapi.applitools.com/api/sessions/batches/$APPLITOOLS_BATCH_ID/close/bypointerid/?apiKey=$APPLITOOLS_API_KEY"
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos
      - slack/status:
          <<: *slack_status

  test_e2e_comps:
    working_directory: ~/project
    executor: cypress
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cypress-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Component Tests
          command: make e2e_test_comps
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos
      - slack/status:
          <<: *slack_status

  test_e2e_docs:
    working_directory: ~/project
    executor: cypress
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cypress-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Docs Site Functional Tests
          command: |
            make e2e_test_docs
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos
      - slack/status:
          <<: *slack_status

  copy_dev_baselines_to_master:
    working_directory: ~/project
    executor: java
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Copy Dev Baselines to Master
          command: |
            curl -L "https://dl.bintray.com/applitoolseyes/generic/EyesUtilities_1.3.1.jar" -o EyesUtilities_1.3.1.jar
            java -jar EyesUtilities_1.3.1.jar copyBaselines -s develop -t master -k ${APPLITOOLS_API_KEY_WITH_MERGE_CREDENTIALS}

  create_release_candidate:
    working_directory: ~/project
    executor: node
    steps:
      - checkout
      - run:
          name: install hub
          command: make install_hub
      - add_ssh_keys:
          fingerprints: "7b:19:47:48:3c:27:a2:d2:fa:59:87:d5:7a:ce:ce:80"
      - run:
          name: Set github identity
          command: make set_git_identity
      - run:
          name: bump version
          command: make create_release_candidate
      - run:
          name: export version
          command: |
            export VERSION=$(jq -r .version package.json)
            echo "export VERSION=${VERSION}" >> $BASH_ENV
      - slack/status:
          <<: *slack_status
      - slack/notify:
          color: "#42e2f4"
          channel: '#nuk-pp-newskit'
          message: "Hi all, \n We are about to deploy ${VERSION}. The release note can be found here: https://nidigitalsolutions.jira.com/projects/PPDSC?orderField=RANK&selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page&status=no-filter&contains=${VERSION}"

  publish_npm:
    parameters:
      publish_dev:
        type: boolean
        default: false
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Add NPM login credentionals
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Set github identity
          command: make set_git_identity
      - when:
          condition: << parameters.publish_dev >>
          steps:
            - run:
                name: Publish components to NPM
                command: make publish_npm_dev
      - unless:
          condition: << parameters.publish_dev >>
          steps:
            - run:
                name: Publish components to NPM
                command: make publish_npm
      - slack/status:
          <<: *slack_status

  build_push_docker_ecr:
    parameters:
      aws_region:
        description: AWS Region
        type: string
        default: "${AWS_DEFAULT_REGION}"
      aws_access_key_id:
        description: AWS Access Key Id
        type: string
        default: "${AWS_ACCESS_KEY_ID}"
      aws_secret_key:
        description: AWS Secret Key
        type: string
        default: "${AWS_SECRET_ACCESS_KEY}"
      aws_ecr_url:
        description: AWS Account URL
        type: string
        default: "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com"
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: "${AWS_ASSUME_ROLE_ARN}"
      ecr_repo:
        description: ECR REPO
        type: string
        default: "${AWS_RESOURCE_NAME_PREFIX}"
      docker_version:
        description: Docker Image Tag
        type: string
        default: "dev"
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - setup_remote_docker
      - run:
          name: Install python and pip
          command: |
                    sudo apt-get update
                    sudo apt-get install python-pip python-dev
      - run:
          name: Install awscli
          command: sudo pip install awscli
      - run:
          command: |
            if [ << parameters.docker_version >> = release ]; then
              export DOCKER_TAG=$(node -p "require('./package.json').version")
            else
              export DOCKER_TAG=${CIRCLE_SHA1}
            fi
            export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key_id >>
            export AWS_SECRET_ACCESS_KEY=<< parameters.aws_secret_key >>
            export DOCKER_REGISTRY_URL=<< parameters.aws_ecr_url >>
            export DOCKER_REPO=<< parameters.ecr_repo >>
            export temp_role=$(aws sts assume-role \
                    --role-arn "<< parameters.aws_assume_role_arn >>" \
                    --role-session-name "circle-ci-assume")
            export AWS_ACCESS_KEY_ID=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
            aws ecr get-login --no-include-email --region << parameters.aws_region >> | /bin/bash
            make build_docker
            make push_docker
      - slack/status:
          <<: *slack_status

  eks_flux_deploy:
    # This one does a Flux deployment (writes to a Flux repo), using the flux-k8s tool you can find in https://github.com/newscorp-ghfb/ncu-circle-pipeline
    parameters:
      environment:
        type: string
      substitution_dir:
        type: string
        default: "eks/manifests"
      flux_repo_url:
        type: string
        default: "git@github.com:newscorp-ghfb/ncu-flux-newskit-site.git"
      flux_repo_name:
        type: string
        default: "ncu-flux-newskit-site"
    executor: flux-deploy
    steps:
      - setup_remote_docker
      - checkout
        # We have to add the ssh key so that Circle has permissions to checkout the private repo
      - add_ssh_keys:
          fingerprints: "7b:19:47:48:3c:27:a2:d2:fa:59:87:d5:7a:ce:ce:80"
      - run: |
          apk add --update npm
          if [ << parameters.environment >> = dev ]; then
            export DOCKER_TAG=${CIRCLE_SHA1}
          else
            export DOCKER_TAG=$(node -p "require('./package.json').version")
          fi
          config_values=eks/values/product-platforms-values-<< parameters.environment >>.yaml
          out_dir=product-platforms-<< parameters.environment >>
          flux_repo_target=<< parameters.environment >>/eks
          git config --global user.email "ncu-product-platforms@news.co.uk"
          git config --global user.name "Product Platforms Service"
          flux-generate "${CIRCLE_SHA1}" $config_values << parameters.substitution_dir >> $out_dir
          flux-commit -u << parameters.flux_repo_url >> -n << parameters.flux_repo_name >> -d $out_dir -t $flux_repo_target -m "${CIRCLE_SHA1}_$out_dir"
      - slack/status:
          <<: *slack_status

  eks_kubectl_deploy:
    parameters:
      environment:
        type: string
        description: Deplyoment environment
      aws_region:
        description: AWS Region
        type: string
        default: "${AWS_DEFAULT_REGION}"
      aws_access_key_id:
        description: AWS Access Key Id
        type: string
        default: "${AWS_ACCESS_KEY_ID}"
      aws_secret_key:
        description: AWS Secret Key
        type: string
        default: "${AWS_SECRET_ACCESS_KEY}"
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: "${AWS_ASSUME_ROLE_ARN}"
      notify:
        description: Send slack notification
        type: boolean
        default: false
    executor: kubectl-deploy
    steps:
      - checkout
      - setup_remote_docker
      - add_ssh_keys:
          fingerprints: "7b:19:47:48:3c:27:a2:d2:fa:59:87:d5:7a:ce:ce:80"
      - run: |
          apk --no-cache add openssh git bash
          export GIT_SSH_COMMAND="ssh -o StrictHostKeyChecking=no"
          git config --global user.email "ncu-product-platforms@news.co.uk"
          git config --global user.name "Product Platforms Service"
          git clone git@github.com:newscorp-ghfb/ncu-flux-newskit-site.git flux
          export EKS_IAM_ROLE_DEV=<< parameters.aws_assume_role_arn >>
          export EKS_AWS_ACCESS_KEY_ID=<< parameters.aws_access_key_id >>
          export EKS_AWS_SECRET_ACCESS_KEY=<< parameters.aws_secret_key >>
          export AWS_DEFAULT_REGION=<< parameters.aws_region >>
          export CLUSTER_NAME=ceng-eks-<< parameters.environment >>
          export VERSION=$(jq -r .version package.json)
          echo "export VERSION=${VERSION}" >> $BASH_ENV

          nukubectl | grep "export AWS_" > auth.env
          export $(egrep -v '^#' auth.env | xargs)
          rm auth.env

          cd flux/<< parameters.environment >>/eks
          kubectl apply -f .
      - slack/status:
          <<: *slack_status
      - when:
          condition: << parameters.notify >>
          steps:
            - slack/notify:
                color: "#42e2f4"
                channel: '#newskit'
                message: "Hi all, \n ${VERSION} has now been successfully deployed to << parameters.environment >>. The release note can be found here: https://nidigitalsolutions.jira.com/projects/PPDSC?orderField=RANK&selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page&status=no-filter&contains=${VERSION}"

# ========== FILTERS START    ==========

only_develop: &only_develop
  filters:
    branches:
      only: develop

only_trigger_release: &only_trigger_release
  filters:
    branches:
      only: /trigger-release-.*/

only_release: &only_release
  filters:
    branches:
      only: /^release.*/

only_master: &only_master
  filters:
    branches:
      only: master

only_pr: &only_pr
  filters:
    branches:
      ignore:
        - develop
        - master
        - /trigger-release-.*/
        - /^release.*/

only_pr_and_release: &only_pr_and_release
  filters:
    branches:
      ignore:
        - develop
        - master
        - /trigger-release-.*/

ignore_trigger_release: &ignore_trigger_release
  filters:
    branches:
      ignore:
        - /trigger-release-.*/

# ========== FILTERS END        ==========

# ========== REQUIREMENTS START ==========

require_dep: &require_dep
  requires:
    - install_deps

# ========== REQUIREMENTS END   ==========

workflows:
  build_and_deploy:
    jobs:
    # common jobs
      - install_deps:
          <<: *ignore_trigger_release
      - install_cypress:
          <<: *ignore_trigger_release
      - build_components:
          <<: *ignore_trigger_release
          <<: *require_dep
      - build_storybook:
          <<: *ignore_trigger_release
          <<: *require_dep
      - build_docs:
          <<: *ignore_trigger_release
          <<: *require_dep
          requires:
            - build_components
      - build_test_e2e:
          <<: *ignore_trigger_release
          <<: *require_dep
      - test_unit:
          <<: *ignore_trigger_release
          <<: *require_dep
      - test_e2e_comps:
          <<: *ignore_trigger_release
          context: ncu-product-platforms-context
          requires:
            - build_test_e2e
            - install_cypress
      - test_e2e_docs:
          <<: *ignore_trigger_release
          context: ncu-product-platforms-context
          requires:
            - build_docs
            - install_cypress
    # PR jobs
      - run_visual_comps:
          <<: *only_pr_and_release
          type: approval
          requires:
            - build_storybook
      - test_visual_comps:
          <<: *only_pr_and_release
          context: ncu-product-platforms-context
          requires:
            - run_visual_comps
    # develop jobs
      - test_visual_docs:
          <<: *only_develop
          context: ncu-product-platforms-context
          requires:
            - build_docs
            - install_cypress
      - approve_publish_npm_dev:
          type: approval
          <<: *only_develop
      - publish_npm:
          <<: *only_develop
          name: publish_npm_dev
          context: ncu-product-platforms-context
          publish_dev: true
          requires:
            - test_unit
            - test_e2e_comps
            - test_e2e_docs
            - approve_publish_npm_dev
      - build_push_docker_ecr:
          name: build_push_docker_ecr_dev
          context: ncu-product-platforms-context
          <<: *only_develop
          requires:
            - build_storybook
            - test_unit
            - test_e2e_comps
            - test_e2e_docs
      - eks_flux_deploy:
          name: eks_flux_deploy_dev
          context: ncu-newskit-site-dev
          environment: dev
          <<: *only_develop
          requires:
            - build_push_docker_ecr_dev
      - eks_kubectl_deploy:
          name: eks_kubectl_deploy_dev
          context: ncu-newskit-site-dev
          environment: dev
          <<: *only_develop
          requires:
            - eks_flux_deploy_dev
    # release jobs
      - create_release_candidate:
          <<: *only_trigger_release
      - build_push_docker_ecr:
          name: build_push_docker_ecr_release
          context: ncu-product-platforms-context
          docker_version: release
          <<: *only_release
          requires:
            - build_storybook
            - test_unit
            - test_e2e_comps
            - test_e2e_docs
      - eks_flux_deploy:
          name: eks_flux_deploy_staging
          context: ncu-newskit-site-stage
          environment: staging
          <<: *only_release
          requires:
            - build_push_docker_ecr_release
      - eks_kubectl_deploy:
          name: eks_kubectl_deploy_staging
          context: ncu-newskit-site-stage
          environment: staging
          <<: *only_release
          requires:
            - eks_flux_deploy_staging
    # master jobs
      - approve_deployment:
          type: approval
          <<: *only_master
      - copy_dev_baselines_to_master:
          <<: *only_master
          requires:
            - approve_deployment
      - publish_npm:
          context: ncu-product-platforms-context
          <<: *only_master
          requires:
            - test_unit
            - test_e2e_comps
            - test_e2e_docs
      - eks_flux_deploy:
          name: eks_flux_deploy_prod
          context: ncu-newskit-site-prod
          environment: prod
          <<: *only_master
          requires:
            - approve_deployment
            - publish_npm
      - eks_kubectl_deploy:
          name: eks_kubectl_deploy_prod
          context: ncu-newskit-site-prod
          environment: prod
          notify: true
          <<: *only_master
          requires:
            - eks_flux_deploy_prod
